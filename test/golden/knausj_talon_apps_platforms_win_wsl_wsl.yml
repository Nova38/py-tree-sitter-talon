input: |
  # NOTE: to use these commands you will need to activate the tag below in whatever contexts you
  # choose.
  #
  # do this in a separate .talon file or via python. for example, if you use windows terminal for
  # wsl then you might do this:
  #
  #    os: windows
  #    app: windows_terminal
  #    -
  #    tag(): user.wsl
  #
  # however, if you also use windows terminal for other things (powershell), you will want something
  # more specific...like this:
  #
  #    os: windows
  #    app: windows_terminal
  #    title: /^WSL:/
  #    -
  #    tag(): user.wsl
  #
  # then, you will need to find a way to set the window title accordingly. for example, to match
  # the title pattern above, you can set the prompt in your .bashrc file like this:
  #
  #    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME} \u@\h: \w\a\]$PS1"
  #
  # ALSO: if you do populate your window title with your distro name, make sure the 'wsl_title_regex'
  # value in wsl.py is set accordingly.
  tag: user.wsl
  -

  tag(): terminal
  tag(): user.file_manager
  tag(): user.generic_unix_shell
  tag(): user.git
  tag(): user.kubectl

  ^go <user.letter>$: user.file_manager_open_volume("/mnt/{letter}")

  (wsl|weasel) reset path detection: user.wsl_reset_path_detection()
  (wsl|weasel) speak: user.wsl_speak()
output:
  children:
  - text: '# NOTE: to use these commands you will need to activate the tag below in
      whatever contexts you'
    type: comment
  - text: '# choose.'
    type: comment
  - text: '#'
    type: comment
  - text: '# do this in a separate .talon file or via python. for example, if you
      use windows terminal for'
    type: comment
  - text: '# wsl then you might do this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    os: windows'
    type: comment
  - text: '#    app: windows_terminal'
    type: comment
  - text: '#    -'
    type: comment
  - text: '#    tag(): user.wsl'
    type: comment
  - text: '#'
    type: comment
  - text: '# however, if you also use windows terminal for other things (powershell),
      you will want something'
    type: comment
  - text: '# more specific...like this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    os: windows'
    type: comment
  - text: '#    app: windows_terminal'
    type: comment
  - text: '#    title: /^WSL:/'
    type: comment
  - text: '#    -'
    type: comment
  - text: '#    tag(): user.wsl'
    type: comment
  - text: '#'
    type: comment
  - text: '# then, you will need to find a way to set the window title accordingly.
      for example, to match'
    type: comment
  - text: '# the title pattern above, you can set the prompt in your .bashrc file
      like this:'
    type: comment
  - text: '#'
    type: comment
  - text: '#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}WSL:${WSL_DISTRO_NAME}
      \u@\h: \w\a\]$PS1"'
    type: comment
  - text: '#'
    type: comment
  - text: '# ALSO: if you do populate your window title with your distro name, make
      sure the ''wsl_title_regex'''
    type: comment
  - text: '# value in wsl.py is set accordingly.'
    type: comment
  - children:
    - children:
      - text: tag
        type: identifier
      - text: ' user.wsl'
        type: implicit_string
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.wsl'
        type: implicit_string
      type: match
    type: context
  - children:
    - text: terminal
      type: identifier
    tag:
      text: terminal
      type: identifier
    type: include_tag
  - children:
    - text: user.file_manager
      type: identifier
    tag:
      text: user.file_manager
      type: identifier
    type: include_tag
  - children:
    - text: user.generic_unix_shell
      type: identifier
    tag:
      text: user.generic_unix_shell
      type: identifier
    type: include_tag
  - children:
    - text: user.git
      type: identifier
    tag:
      text: user.git
      type: identifier
    type: include_tag
  - children:
    - text: user.kubectl
      type: identifier
    tag:
      text: user.kubectl
      type: identifier
    type: include_tag
  - children:
    - children:
      - text: ^
        type: start_anchor
      - children:
        - text: go
          type: word
        - capture_name:
            text: user.letter
            type: identifier
          children:
          - text: user.letter
            type: identifier
          type: capture
        type: seq
      - text: $
        type: end_anchor
      type: rule
    - children:
      - children:
        - action_name:
            text: user.file_manager_open_volume
            type: identifier
          arguments:
            children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          children:
          - text: user.file_manager_open_volume
            type: identifier
          - children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.file_manager_open_volume
            type: identifier
          arguments:
            children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          children:
          - text: user.file_manager_open_volume
            type: identifier
          - children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          type: action
        type: expression
      type: block
    rule:
      children:
      - text: ^
        type: start_anchor
      - children:
        - text: go
          type: word
        - capture_name:
            text: user.letter
            type: identifier
          children:
          - text: user.letter
            type: identifier
          type: capture
        type: seq
      - text: $
        type: end_anchor
      type: rule
    script:
      children:
      - children:
        - action_name:
            text: user.file_manager_open_volume
            type: identifier
          arguments:
            children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          children:
          - text: user.file_manager_open_volume
            type: identifier
          - children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.file_manager_open_volume
            type: identifier
          arguments:
            children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          children:
          - text: user.file_manager_open_volume
            type: identifier
          - children:
            - children:
              - text: /mnt/
                type: string_content
              - text: '{'
                type: string_content
              - text: letter
                type: string_content
              - text: '}'
                type: string_content
              type: string
            type: argument_list
          type: action
        type: expression
      type: block
    type: command
  - children:
    - children:
      - children:
        - children:
          - children:
            - text: wsl
              type: word
            - text: weasel
              type: word
            type: choice
          type: parenthesized_rule
        - text: reset
          type: word
        - text: path
          type: word
        - text: detection
          type: word
        type: seq
      type: rule
    - children:
      - children:
        - action_name:
            text: user.wsl_reset_path_detection
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_reset_path_detection
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.wsl_reset_path_detection
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_reset_path_detection
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    rule:
      children:
      - children:
        - children:
          - children:
            - text: wsl
              type: word
            - text: weasel
              type: word
            type: choice
          type: parenthesized_rule
        - text: reset
          type: word
        - text: path
          type: word
        - text: detection
          type: word
        type: seq
      type: rule
    script:
      children:
      - children:
        - action_name:
            text: user.wsl_reset_path_detection
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_reset_path_detection
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.wsl_reset_path_detection
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_reset_path_detection
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    type: command
  - children:
    - children:
      - children:
        - children:
          - children:
            - text: wsl
              type: word
            - text: weasel
              type: word
            type: choice
          type: parenthesized_rule
        - text: speak
          type: word
        type: seq
      type: rule
    - children:
      - children:
        - action_name:
            text: user.wsl_speak
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_speak
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.wsl_speak
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_speak
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    rule:
      children:
      - children:
        - children:
          - children:
            - text: wsl
              type: word
            - text: weasel
              type: word
            type: choice
          type: parenthesized_rule
        - text: speak
          type: word
        type: seq
      type: rule
    script:
      children:
      - children:
        - action_name:
            text: user.wsl_speak
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_speak
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.wsl_speak
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.wsl_speak
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    type: command
  type: source_file
