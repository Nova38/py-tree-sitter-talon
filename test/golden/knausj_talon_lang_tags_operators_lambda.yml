input: |
  tag: user.code_operators_lambda
  -

  # In many languages, anonymous functions aren't merely infix syntax:
  #
  #       Haskell  '\x -> bla'
  #       OCaml    'fun x -> bla'
  #       Rust     '|x| { bla }'
  #
  # Therefore a revision of this command may be in order.

  # syntax for anonymous functions
  op lambda: user.code_operator_lambda()
output:
  children:
  - children:
    - children:
      - text: tag
        type: identifier
      - text: ' user.code_operators_lambda'
        type: implicit_string
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.code_operators_lambda'
        type: implicit_string
      type: match
    type: context
  - text: '# In many languages, anonymous functions aren''t merely infix syntax:'
    type: comment
  - text: '#'
    type: comment
  - text: '#       Haskell  ''\x -> bla'''
    type: comment
  - text: '#       OCaml    ''fun x -> bla'''
    type: comment
  - text: '#       Rust     ''|x| { bla }'''
    type: comment
  - text: '#'
    type: comment
  - text: '# Therefore a revision of this command may be in order.'
    type: comment
  - text: '# syntax for anonymous functions'
    type: comment
  - children:
    - children:
      - children:
        - text: op
          type: word
        - text: lambda
          type: word
        type: seq
      type: rule
    - children:
      - children:
        - action_name:
            text: user.code_operator_lambda
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.code_operator_lambda
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.code_operator_lambda
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.code_operator_lambda
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    rule:
      children:
      - children:
        - text: op
          type: word
        - text: lambda
          type: word
        type: seq
      type: rule
    script:
      children:
      - children:
        - action_name:
            text: user.code_operator_lambda
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.code_operator_lambda
            type: identifier
          - children: []
            type: argument_list
          type: action
        expression:
          action_name:
            text: user.code_operator_lambda
            type: identifier
          arguments:
            children: []
            type: argument_list
          children:
          - text: user.code_operator_lambda
            type: identifier
          - children: []
            type: argument_list
          type: action
        type: expression
      type: block
    type: command
  type: source_file
