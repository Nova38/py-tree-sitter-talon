input: |
  tag: user.code_functions
  -
  # Default implementation of capture listens for the following keywords in any
  # order: private pro pub static
  #
  # The default action implementation looks for the token combination on the left
  # (funky is added here for searchability) and calls the function on the right:
  #
  #   * funky -> code_default_function
  #   * private funky -> code_private_function
  #   * pro funky -> code_protected_function
  #   * pub funky -> code_public_function
  #   * static funky -> code_private_static_function
  #   * private static funky -> code_private_static_function
  #   * pro static funky -> code_protected_static_function
  #   * pub static funky -> code_public_static_function
  #
  ^{user.code_function_modifier}* funky <user.text>$:
    user.code_modified_function(code_function_modifier_list or 0, text)

  # for annotating function parameters
  is type <user.code_type>: user.code_insert_type_annotation(code_type)
  returns [type] <user.code_type>: user.code_insert_return_type(code_type)

  # for generic reference of types
  type <user.code_type>: insert(code_type)
output:
  type: source_file
  children:
  - type: context
    children:
    - type: match
      children: []
      key:
        text: tag
        type: identifier
      pattern:
        text: ' user.code_functions'
        type: implicit_string
  - text: '# Default implementation of capture listens for the following keywords
      in any'
    type: comment
  - text: '# order: private pro pub static'
    type: comment
  - text: '#'
    type: comment
  - text: '# The default action implementation looks for the token combination on
      the left'
    type: comment
  - text: '# (funky is added here for searchability) and calls the function on the
      right:'
    type: comment
  - text: '#'
    type: comment
  - text: '#   * funky -> code_default_function'
    type: comment
  - text: '#   * private funky -> code_private_function'
    type: comment
  - text: '#   * pro funky -> code_protected_function'
    type: comment
  - text: '#   * pub funky -> code_public_function'
    type: comment
  - text: '#   * static funky -> code_private_static_function'
    type: comment
  - text: '#   * private static funky -> code_private_static_function'
    type: comment
  - text: '#   * pro static funky -> code_protected_static_function'
    type: comment
  - text: '#   * pub static funky -> code_public_static_function'
    type: comment
  - text: '#'
    type: comment
  - type: command
    children: []
    rule:
      type: rule
      children:
      - text: ^
        type: start_anchor
      - type: seq
        children:
        - type: repeat
          children:
          - type: list
            children: []
            list_name:
              text: user.code_function_modifier
              type: identifier
        - text: funky
          type: word
        - type: capture
          children: []
          capture_name:
            text: user.text
            type: identifier
      - text: $
        type: end_anchor
    script:
      type: block
      children:
      - type: expression
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.code_modified_function
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: binary_operator
              children: []
              left:
                type: variable
                children: []
                variable_name:
                  text: code_function_modifier_list
                  type: identifier
              operator:
                text: or
                type: operator
              right:
                text: '0'
                type: integer
            - type: variable
              children: []
              variable_name:
                text: text
                type: identifier
  - text: '# for annotating function parameters'
    type: comment
  - type: command
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: is
          type: word
        - text: type
          type: word
        - type: capture
          children: []
          capture_name:
            text: user.code_type
            type: identifier
    script:
      type: block
      children:
      - type: expression
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.code_insert_type_annotation
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: variable
              children: []
              variable_name:
                text: code_type
                type: identifier
  - type: command
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: returns
          type: word
        - type: optional
          children:
          - text: type
            type: word
        - type: capture
          children: []
          capture_name:
            text: user.code_type
            type: identifier
    script:
      type: block
      children:
      - type: expression
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.code_insert_return_type
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: variable
              children: []
              variable_name:
                text: code_type
                type: identifier
  - text: '# for generic reference of types'
    type: comment
  - type: command
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: type
          type: word
        - type: capture
          children: []
          capture_name:
            text: user.code_type
            type: identifier
    script:
      type: block
      children:
      - type: expression
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: variable
              children: []
              variable_name:
                text: code_type
                type: identifier
