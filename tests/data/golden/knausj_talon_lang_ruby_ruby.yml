input: |
  tag: user.ruby
  -
  tag(): user.code_imperative
  tag(): user.code_object_oriented

  tag(): user.code_comment_line
  tag(): user.code_comment_documentation
  tag(): user.code_data_bool
  tag(): user.code_data_null
  tag(): user.code_functions
  tag(): user.code_libraries
  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_lambda
  tag(): user.code_operators_math

  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"

  args pipe: user.insert_between("|", "|")

  # NOTE: this command is created for backward compatibility, but the documentation comments are not actually strings in Ruby.
  dock string:
      user.code_comment_documentation()

  state end: "end"
  state begin: "begin"
  state rescue: "rescue "
  state module: "module "

  ^instance <user.text>$:
      insert("@")
      user.code_public_variable_formatter(text)
output:
  type: source_file
  children:
  - type: matches
    children:
    - type: match
      children: []
      key:
        text: tag
        type: identifier
      modifier: []
      pattern:
        text: ' user.ruby'
        type: implicit_string
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_imperative
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_object_oriented
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_comment_line
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_comment_documentation
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_data_bool
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_data_null
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_functions
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_libraries
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_operators_array
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_operators_assignment
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_operators_bitwise
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_operators_lambda
      type: identifier
  - type: tag_import_declaration
    children: []
    tag:
      text: user.code_operators_math
      type: identifier
  - type: settings_declaration
    children:
    - type: block
      children:
      - type: assignment_statement
        children: []
        left:
          text: user.code_private_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment_statement
        children: []
        left:
          text: user.code_protected_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment_statement
        children: []
        left:
          text: user.code_public_function_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment_statement
        children: []
        left:
          text: user.code_private_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment_statement
        children: []
        left:
          text: user.code_protected_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
      - type: assignment_statement
        children: []
        left:
          text: user.code_public_variable_formatter
          type: identifier
        right:
          type: string
          children:
          - text: SNAKE_CASE
            type: string_content
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: args
          type: word
        - text: pipe
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.insert_between
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '|'
                type: string_content
            - type: string
              children:
              - text: '|'
                type: string_content
  - text: '# NOTE: this command is created for backward compatibility, but the documentation
      comments are not actually strings in Ruby.'
    type: comment
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: dock
          type: word
        - text: string
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.code_comment_documentation
            type: identifier
          arguments:
            type: argument_list
            children: []
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: end
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: string
          children:
          - text: end
            type: string_content
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: begin
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: string
          children:
          - text: begin
            type: string_content
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: rescue
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: string
          children:
          - text: 'rescue '
            type: string_content
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - type: seq
        children:
        - text: state
          type: word
        - text: module
          type: word
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: string
          children:
          - text: 'module '
            type: string_content
  - type: command_declaration
    children: []
    rule:
      type: rule
      children:
      - text: ^
        type: start_anchor
      - type: seq
        children:
        - text: instance
          type: word
        - type: capture
          children: []
          capture_name:
            text: user.text
            type: identifier
      - text: $
        type: end_anchor
    script:
      type: block
      children:
      - type: expression_statement
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: insert
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: string
              children:
              - text: '@'
                type: string_content
      - type: expression_statement
        children: []
        expression:
          type: action
          children: []
          action_name:
            text: user.code_public_variable_formatter
            type: identifier
          arguments:
            type: argument_list
            children:
            - type: variable
              children: []
              variable_name:
                text: text
                type: identifier
