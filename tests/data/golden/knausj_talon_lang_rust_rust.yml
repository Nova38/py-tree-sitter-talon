input: |
  tag: user.rust
  -
  tag(): user.code_comment_line
  tag(): user.code_comment_block_c_like
  tag(): user.code_comment_documentation

  tag(): user.code_imperative
  tag(): user.code_object_oriented

  tag(): user.code_data_bool
  tag(): user.code_data_null

  tag(): user.code_functions
  tag(): user.code_functions_common
  tag(): user.code_libraries
  tag(): user.code_libraries_gui

  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_math

  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"

  # rust-specific grammars

  ## for unsafe rust
  state unsafe: "unsafe "
  unsafe block: user.code_state_unsafe()

  ## rust centric struct and enum definitions
  state (struct | structure) <user.text>:
      insert("struct ")
      insert(user.formatted_text(text, "PUBLIC_CAMEL_CASE"))

  state enum <user.text>:
      insert("enum ")
      insert(user.formatted_text(text, "PUBLIC_CAMEL_CASE"))

  toggle use: user.code_toggle_libraries()

  ## Simple aliases
  borrow: "&"
  borrow mutable: "&mut "
  state (pub | public): "pub "
  state (pub | public) crate: "pub(crate) "
  state (dyn | dynamic): "dyn "
  state constant: "const "
  state (funk | func | function): "fn "
  state (imp | implements): "impl "
  state let mute: "let mut "
  state let: "let "
  state (mute | mutable): "mut "
  state (mod | module): "mod "
  state ref (mute | mutable): "ref mut "
  state ref: "ref "
  state trait: "trait "
  state match: user.code_state_switch()
  state (some | sum): "Some"
  state static: "static "
  self taught: "self."
  state use: user.code_import()

  use <user.code_libraries>:
      user.code_insert_library(code_libraries, "")
      key(semicolon enter)

  ## specialist flow control
  state if let some: user.code_insert_if_let_some()
  state if let error: user.code_insert_if_let_error()

  ## rust centric synonyms
  is some: user.code_insert_is_not_null()

  ## for implementing
  implement (struct | structure): user.code_state_implements()

  ## for annotating function parameters
  is implemented trait {user.code_trait}: user.code_insert_trait_annotation(code_trait)
  is implemented trait: ": impl "
  returns implemented trait {user.code_trait}: user.code_insert_return_trait(code_trait)
  returns implemented trait: " -> impl "

  ## for generic reference of traits
  trait {user.code_trait}: insert("{code_trait}")
  implemented trait {user.code_trait}: insert("impl {code_trait}")
  dynamic trait {user.code_trait}: insert("dyn {code_trait}")

  ## for generic reference of macro
  macro {user.code_macros}:
      user.code_insert_macro(code_macros, "")
  macro wrap {user.code_macros}:
      user.code_insert_macro(code_macros, edit.selected_text())

  ## rust specific document comments
  block dock comment: user.code_comment_documentation_block()
  inner dock comment: user.code_comment_documentation_inner()
  inner block dock comment: user.code_comment_documentation_block_inner()
output:
  type: source_file
  children:
  - type: matches
    children:
    - type: match
      children: []
      left:
        text: tag
        type: identifier
      modifiers: []
      right:
        text: ' user.rust'
        type: implicit_string
  - type: declarations
    children:
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_line
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_block_c_like
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_documentation
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_imperative
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_object_oriented
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_bool
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_null
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions_common
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_libraries
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_libraries_gui
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_array
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_assignment
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_bitwise
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_math
        type: identifier
    - type: settings_declaration
      children:
      right:
        type: block
        children:
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
    - text: '# rust-specific grammars'
      type: comment
    - text: '## for unsafe rust'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: unsafe
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'unsafe '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: unsafe
            type: word
          - text: block
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_state_unsafe
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '## rust centric struct and enum definitions'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: struct
                type: word
              - text: structure
                type: word
          - type: capture
            children: []
            capture_name:
              text: user.text
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'struct '
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: action
                children: []
                action_name:
                  text: user.formatted_text
                  type: identifier
                arguments:
                  type: argument_list
                  children:
                  - type: variable
                    children: []
                    variable_name:
                      text: text
                      type: identifier
                  - type: string
                    children:
                    - text: PUBLIC_CAMEL_CASE
                      type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: enum
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.text
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'enum '
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: action
                children: []
                action_name:
                  text: user.formatted_text
                  type: identifier
                arguments:
                  type: argument_list
                  children:
                  - type: variable
                    children: []
                    variable_name:
                      text: text
                      type: identifier
                  - type: string
                    children:
                    - text: PUBLIC_CAMEL_CASE
                      type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: toggle
            type: word
          - text: use
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_toggle_libraries
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '## Simple aliases'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - text: borrow
          type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '&'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: borrow
            type: word
          - text: mutable
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '&mut '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: pub
                type: word
              - text: public
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'pub '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: pub
                type: word
              - text: public
                type: word
          - text: crate
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'pub(crate) '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: dyn
                type: word
              - text: dynamic
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'dyn '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: constant
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'const '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: funk
                type: word
              - text: func
                type: word
              - text: function
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'fn '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: imp
                type: word
              - text: implements
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'impl '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: let
            type: word
          - text: mute
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'let mut '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: let
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'let '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: mute
                type: word
              - text: mutable
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'mut '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: mod
                type: word
              - text: module
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'mod '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: ref
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: mute
                type: word
              - text: mutable
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'ref mut '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: ref
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'ref '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: trait
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'trait '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: match
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_state_switch
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: some
                type: word
              - text: sum
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: Some
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: static
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'static '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: self
            type: word
          - text: taught
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: self.
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: use
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_import
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: use
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.code_libraries
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_library
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_libraries
                  type: identifier
              - type: string
                children: []
        - type: expression_statement
          children: []
          expression:
            type: key_action
            children: []
            arguments:
              text: semicolon enter
              type: implicit_string
    - text: '## specialist flow control'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: if
            type: word
          - text: let
            type: word
          - text: some
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_if_let_some
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: if
            type: word
          - text: let
            type: word
          - text: error
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_if_let_error
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '## rust centric synonyms'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: is
            type: word
          - text: some
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_is_not_null
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '## for implementing'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: implement
            type: word
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: struct
                type: word
              - text: structure
                type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_state_implements
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '## for annotating function parameters'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: is
            type: word
          - text: implemented
            type: word
          - text: trait
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_trait
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_trait_annotation
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_trait
                  type: identifier
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: is
            type: word
          - text: implemented
            type: word
          - text: trait
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: ': impl '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: returns
            type: word
          - text: implemented
            type: word
          - text: trait
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_trait
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_return_trait
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_trait
                  type: identifier
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: returns
            type: word
          - text: implemented
            type: word
          - text: trait
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: ' -> impl '
              type: string_content
    - text: '## for generic reference of traits'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: trait
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_trait
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '{'
                  type: string_content
                - text: code_trait
                  type: string_content
                - text: '}'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: implemented
            type: word
          - text: trait
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_trait
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'impl '
                  type: string_content
                - text: '{'
                  type: string_content
                - text: code_trait
                  type: string_content
                - text: '}'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: dynamic
            type: word
          - text: trait
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_trait
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'dyn '
                  type: string_content
                - text: '{'
                  type: string_content
                - text: code_trait
                  type: string_content
                - text: '}'
                  type: string_content
    - text: '## for generic reference of macro'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: macro
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_macros
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_macro
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_macros
                  type: identifier
              - type: string
                children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: macro
            type: word
          - text: wrap
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_macros
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_macro
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_macros
                  type: identifier
              - type: action
                children: []
                action_name:
                  text: edit.selected_text
                  type: identifier
                arguments:
                  type: argument_list
                  children: []
    - text: '## rust specific document comments'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: block
            type: word
          - text: dock
            type: word
          - text: comment
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_comment_documentation_block
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: inner
            type: word
          - text: dock
            type: word
          - text: comment
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_comment_documentation_inner
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: inner
            type: word
          - text: block
            type: word
          - text: dock
            type: word
          - text: comment
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_comment_documentation_block_inner
              type: identifier
            arguments:
              type: argument_list
              children: []
