input: |
  tag: user.c
  -
  tag(): user.code_imperative

  tag(): user.code_comment_line
  tag(): user.code_comment_block_c_like
  tag(): user.code_data_bool
  tag(): user.code_data_null
  tag(): user.code_functions
  tag(): user.code_functions_common
  tag(): user.code_libraries
  tag(): user.code_libraries_gui
  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_math
  tag(): user.code_operators_pointer

  settings():
      user.code_private_function_formatter = "SNAKE_CASE"
      user.code_protected_function_formatter = "SNAKE_CASE"
      user.code_public_function_formatter = "SNAKE_CASE"
      user.code_private_variable_formatter = "SNAKE_CASE"
      user.code_protected_variable_formatter = "SNAKE_CASE"
      user.code_public_variable_formatter = "SNAKE_CASE"
      # whether or not to use uint_8 style datatypes
      #    user.use_stdint_datatypes = 1

  # NOTE: migrated from generic, as they were only used here, though once cpp support is added, perhaps these should be migrated to a tag together with the commands below
  state include:
      insert('#include ')
  state include system:
      user.insert_between("#include <", ">")
  state include local:
      user.insert_between('#include "', '"')
  state type deaf:
      insert('typedef ')
  state type deaf struct:
      insert('typedef struct')
      insert('{\n\n}')
      edit.up()
      key('tab')


  # XXX - create a preprocessor tag for these, as they will match cpp, etc
  state define: "#define "
  state undefine: "#undef "
  state if define: "#ifdef "

  # XXX - preprocessor instead of pre?
  state pre if: "#if "
  state error: "#error "
  state pre else if: "#elif "
  state pre end: "#endif "
  state pragma: "#pragma "
  state default: "default:\nbreak;"

  #control flow
  #best used with a push like command
  #the below example may not work in editors that automatically add the closing bracket
  #if so uncomment the two lines and comment out the rest accordingly
  push brackets:
      edit.line_end()
      #insert("{")
      #key(enter)
      insert("{}")
      edit.left()
      key(enter)
      key(enter)
      edit.up()

  # Declare variables or structs etc.
  # Ex. * int myList
  <user.c_variable> <phrase>:
      insert("{c_variable} ")
      insert(user.formatted_text(phrase, "PRIVATE_CAMEL_CASE,NO_SPACES"))

  <user.c_variable> <user.letter>:
      insert("{c_variable} {letter} ")

  # Ex. (int *)
  cast to <user.c_cast>: "{c_cast}"
  standard cast to <user.stdint_cast>: "{stdint_cast}"
  <user.c_types>: "{c_types}"
  <user.c_pointers>: "{c_pointers}"
  <user.c_keywords>: "{c_keywords}"
  <user.c_signed>: "{c_signed}"
  standard <user.stdint_types>: "{stdint_types}"
  int main:
      user.insert_between("int main(", ")")

  toggle includes: user.code_toggle_libraries()
  include <user.code_libraries>:
      user.code_insert_library(code_libraries, "")
      key(end enter)
output:
  type: source_file
  children:
  - type: matches
    children:
    - type: match
      children: []
      left:
        text: tag
        type: identifier
      modifiers: []
      right:
        text: ' user.c'
        type: implicit_string
  - type: declarations
    children:
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_imperative
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_line
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_block_c_like
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_bool
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_null
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions_common
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_libraries
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_libraries_gui
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_array
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_assignment
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_bitwise
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_math
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_pointer
        type: identifier
    - type: settings_declaration
      children:
      right:
        type: block
        children:
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: SNAKE_CASE
              type: string_content
        - text: '# whether or not to use uint_8 style datatypes'
          type: comment
        - text: '#    user.use_stdint_datatypes = 1'
          type: comment
    - text: '# NOTE: migrated from generic, as they were only used here, though once
        cpp support is added, perhaps these should be migrated to a tag together with
        the commands below'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: include
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '#include '
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: include
            type: word
          - text: system
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.insert_between
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '#include <'
                  type: string_content
              - type: string
                children:
                - text: '>'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: include
            type: word
          - text: local
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.insert_between
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '#include "'
                  type: string_content
              - type: string
                children:
                - text: '"'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: type
            type: word
          - text: deaf
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'typedef '
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: type
            type: word
          - text: deaf
            type: word
          - text: struct
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: typedef struct
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '{'
                  type: string_content
                - text: \n
                  type: string_escape_sequence
                - text: \n
                  type: string_escape_sequence
                - text: '}'
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: edit.up
              type: identifier
            arguments:
              type: argument_list
              children: []
        - type: expression_statement
          children: []
          expression:
            type: key_action
            children: []
            arguments:
              text: "'tab'"
              type: implicit_string
    - text: '# XXX - create a preprocessor tag for these, as they will match cpp,
        etc'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: define
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#define '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: undefine
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#undef '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: if
            type: word
          - text: define
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#ifdef '
              type: string_content
    - text: '# XXX - preprocessor instead of pre?'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: pre
            type: word
          - text: if
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#if '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: error
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#error '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: pre
            type: word
          - text: else
            type: word
          - text: if
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#elif '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: pre
            type: word
          - text: end
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#endif '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: pragma
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '#pragma '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: default
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'default:'
              type: string_content
            - text: \n
              type: string_escape_sequence
            - text: break;
              type: string_content
    - text: '#control flow'
      type: comment
    - text: '#best used with a push like command'
      type: comment
    - text: '#the below example may not work in editors that automatically add the
        closing bracket'
      type: comment
    - text: '#if so uncomment the two lines and comment out the rest accordingly'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: push
            type: word
          - text: brackets
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: edit.line_end
              type: identifier
            arguments:
              type: argument_list
              children: []
        - text: '#insert("{")'
          type: comment
        - text: '#key(enter)'
          type: comment
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '{'
                  type: string_content
                - text: '}'
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: edit.left
              type: identifier
            arguments:
              type: argument_list
              children: []
        - type: expression_statement
          children: []
          expression:
            type: key_action
            children: []
            arguments:
              text: enter
              type: implicit_string
        - type: expression_statement
          children: []
          expression:
            type: key_action
            children: []
            arguments:
              text: enter
              type: implicit_string
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: edit.up
              type: identifier
            arguments:
              type: argument_list
              children: []
    - text: '# Declare variables or structs etc.'
      type: comment
    - text: '# Ex. * int myList'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - type: capture
            children: []
            capture_name:
              text: user.c_variable
              type: identifier
          - type: capture
            children: []
            capture_name:
              text: phrase
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '{'
                  type: string_content
                - text: c_variable
                  type: string_content
                - text: '}'
                  type: string_content
                - text: ' '
                  type: string_content
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: action
                children: []
                action_name:
                  text: user.formatted_text
                  type: identifier
                arguments:
                  type: argument_list
                  children:
                  - type: variable
                    children: []
                    variable_name:
                      text: phrase
                      type: identifier
                  - type: string
                    children:
                    - text: PRIVATE_CAMEL_CASE,NO_SPACES
                      type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - type: capture
            children: []
            capture_name:
              text: user.c_variable
              type: identifier
          - type: capture
            children: []
            capture_name:
              text: user.letter
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: insert
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: '{'
                  type: string_content
                - text: c_variable
                  type: string_content
                - text: '}'
                  type: string_content
                - text: ' '
                  type: string_content
                - text: '{'
                  type: string_content
                - text: letter
                  type: string_content
                - text: '}'
                  type: string_content
                - text: ' '
                  type: string_content
    - text: '# Ex. (int *)'
      type: comment
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: cast
            type: word
          - text: to
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.c_cast
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: c_cast
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: standard
            type: word
          - text: cast
            type: word
          - text: to
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.stdint_cast
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: stdint_cast
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: capture
          children: []
          capture_name:
            text: user.c_types
            type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: c_types
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: capture
          children: []
          capture_name:
            text: user.c_pointers
            type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: c_pointers
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: capture
          children: []
          capture_name:
            text: user.c_keywords
            type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: c_keywords
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: capture
          children: []
          capture_name:
            text: user.c_signed
            type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: c_signed
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: standard
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.stdint_types
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '{'
              type: string_content
            - text: stdint_types
              type: string_content
            - text: '}'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: int
            type: word
          - text: main
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.insert_between
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: int main(
                  type: string_content
              - type: string
                children:
                - text: )
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: toggle
            type: word
          - text: includes
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_toggle_libraries
              type: identifier
            arguments:
              type: argument_list
              children: []
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: include
            type: word
          - type: capture
            children: []
            capture_name:
              text: user.code_libraries
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.code_insert_library
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: variable
                children: []
                variable_name:
                  text: code_libraries
                  type: identifier
              - type: string
                children: []
        - type: expression_statement
          children: []
          expression:
            type: key_action
            children: []
            arguments:
              text: end enter
              type: implicit_string
