input: |
  tag: user.javascript
  -
  tag(): user.code_imperative
  tag(): user.code_object_oriented

  tag(): user.code_comment_line
  tag(): user.code_comment_block_c_like
  tag(): user.code_data_bool
  tag(): user.code_data_null
  tag(): user.code_functions
  tag(): user.code_functions_common
  tag(): user.code_keywords
  tag(): user.code_libraries
  tag(): user.code_operators_array
  tag(): user.code_operators_assignment
  tag(): user.code_operators_bitwise
  tag(): user.code_operators_lambda
  tag(): user.code_operators_math

  settings():
      user.code_private_function_formatter = "PRIVATE_CAMEL_CASE"
      user.code_protected_function_formatter = "PRIVATE_CAMEL_CASE"
      user.code_public_function_formatter = "PRIVATE_CAMEL_CASE"
      user.code_private_variable_formatter = "PRIVATE_CAMEL_CASE"
      user.code_protected_variable_formatter = "PRIVATE_CAMEL_CASE"
      user.code_public_variable_formatter = "PRIVATE_CAMEL_CASE"

  (op | is) strict equal: " === "
  (op | is) strict not equal: " !== "
  op null else: " ?? "

  state const: "const "

  state let: "let "

  state var: "var "

  state export: "export "

  state async: "async "

  state await: "await "

  dot {user.code_common_member_function}:
      user.insert_between(".{code_common_member_function}(", ")")

  state map: app.notify('ERROR: Command deprecated; please use "dot map"')
  state filter: app.notify('ERROR: Command deprecated; please use "dot filter"')
  state reduce: app.notify('ERROR: Command deprecated; please use "dot reduce"')

  state spread: "..."

  from import:
      user.insert_between(' from  "', '"')
output:
  type: source_file
  children:
  - type: matches
    children:
    - type: match
      children: []
      left:
        text: tag
        type: identifier
      modifiers: []
      right:
        text: ' user.javascript'
        type: implicit_string
  - type: declarations
    children:
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_imperative
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_object_oriented
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_line
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_comment_block_c_like
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_bool
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_data_null
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_functions_common
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_keywords
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_libraries
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_array
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_assignment
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_bitwise
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_lambda
        type: identifier
    - type: tag_import_declaration
      children: []
      right:
        text: user.code_operators_math
        type: identifier
    - type: settings_declaration
      children:
      right:
        type: block
        children:
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_function_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_private_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_protected_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
        - type: assignment_statement
          children: []
          left:
            text: user.code_public_variable_formatter
            type: identifier
          right:
            type: string
            children:
            - text: PRIVATE_CAMEL_CASE
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: op
                type: word
              - text: is
                type: word
          - text: strict
            type: word
          - text: equal
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: ' === '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - type: parenthesized_rule
            children:
            - type: choice
              children:
              - text: op
                type: word
              - text: is
                type: word
          - text: strict
            type: word
          - text: not
            type: word
          - text: equal
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: ' !== '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: op
            type: word
          - text: 'null'
            type: word
          - text: else
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: ' ?? '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: const
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'const '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: let
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'let '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: var
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'var '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: export
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'export '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: async
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'async '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: await
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: 'await '
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: dot
            type: word
          - type: list
            children: []
            list_name:
              text: user.code_common_member_function
              type: identifier
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.insert_between
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: .
                  type: string_content
                - text: '{'
                  type: string_content
                - text: code_common_member_function
                  type: string_content
                - text: '}'
                  type: string_content
                - text: (
                  type: string_content
              - type: string
                children:
                - text: )
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: map
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: app.notify
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'ERROR: Command deprecated; please use "dot map"'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: filter
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: app.notify
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'ERROR: Command deprecated; please use "dot filter"'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: reduce
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: app.notify
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: 'ERROR: Command deprecated; please use "dot reduce"'
                  type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: state
            type: word
          - text: spread
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: string
            children:
            - text: '...'
              type: string_content
    - type: command_declaration
      children:
      left:
        type: rule
        children:
        - type: seq
          children:
          - text: from
            type: word
          - text: import
            type: word
      right:
        type: block
        children:
        - type: expression_statement
          children: []
          expression:
            type: action
            children: []
            action_name:
              text: user.insert_between
              type: identifier
            arguments:
              type: argument_list
              children:
              - type: string
                children:
                - text: ' from  "'
                  type: string_content
              - type: string
                children:
                - text: '"'
                  type: string_content
