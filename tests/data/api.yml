input:
output: |-
  def find_command(self: TalonSourceFile, text: collections.Sequence[str], *, fullmatch: bool = False, get_capture: Optional[collections.Callable[[str], Union[TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonRule, TalonSeq, TalonStartAnchor, TalonWord, None]]] = None, get_list: Optional[collections.Callable[[str], Union[typing.List[str], typing.Dict[str, Any], None]]] = None) -> Optional[TalonCommandDeclaration]:
    pass
  def match(self: Union[TalonCommandDeclaration, TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonRule, TalonSeq, TalonStartAnchor, TalonWord], text: collections.Sequence[str], *, fullmatch: bool = False, get_capture: Optional[collections.Callable[[str], Union[TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonRule, TalonSeq, TalonStartAnchor, TalonWord, None]]] = None, get_list: Optional[collections.Callable[[str], Union[typing.List[str], typing.Dict[str, Any], None]]] = None) -> bool:
    pass
  class Branch(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: Union[None, Node, Sequence[Node]]) -> None:
      pass
  class Leaf(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class Node(DataClassJsonMixin):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class ParseError(Exception):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Node], contents: Optional[str] = None, filename: Optional[str] = None) -> None:
      pass
  class Point(object):
    def __init__(line: int, column: int) -> None:
      pass
  class TalonAction(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], action_name: 'TalonIdentifier', arguments: 'TalonArgumentList') -> None:
      pass
  class TalonArgumentList(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonExpression, TalonComment, TalonError]]) -> None:
      pass
  class TalonAssignmentStatement(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], left: 'TalonIdentifier', right: 'TalonExpression') -> None:
      pass
  class TalonBinaryOperator(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], left: 'TalonExpression', operator: 'TalonOperator', right: 'TalonExpression') -> None:
      pass
  class TalonBlock(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonStatement, TalonComment, TalonError]]) -> None:
      pass
  class TalonCapture(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], capture_name: 'TalonIdentifier') -> None:
      pass
  class TalonChoice(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonSeq, TalonStartAnchor, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonCommandDeclaration(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[collections.Sequence[TalonComment]], left: TalonRule, right: TalonBlock) -> None:
      pass
  class TalonComment(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonDeclaration(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonDeclarations(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonDeclaration, TalonComment, TalonError]]) -> None:
      pass
  class TalonEndAnchor(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonError(Exception):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Node], contents: Optional[str] = None, filename: Optional[str] = None) -> None:
      pass
  class TalonExpression(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonExpressionStatement(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], expression: 'TalonExpression') -> None:
      pass
  class TalonFloat(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonIdentifier(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonImplicitString(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonInteger(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonInterpolation(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonExpression, TalonComment, TalonError]]) -> None:
      pass
  class TalonKeyAction(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], arguments: 'TalonImplicitString') -> None:
      pass
  class TalonKeyBindingDeclaration(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[collections.Sequence[TalonComment]], left: TalonKeyAction, right: TalonBlock) -> None:
      pass
  class TalonList(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], list_name: 'TalonIdentifier') -> None:
      pass
  class TalonMatch(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], left: 'TalonIdentifier', modifiers: typing.List['TalonMatchModifier'], right: 'TalonImplicitString') -> None:
      pass
  class TalonMatchModifier(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonMatches(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonMatch, TalonComment, TalonError]]) -> None:
      pass
  class TalonNumber(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonOperator(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonOptional(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonSeq, TalonStartAnchor, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonParenthesizedExpression(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonExpression, TalonComment, TalonError]]) -> None:
      pass
  class TalonParenthesizedRule(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonSeq, TalonStartAnchor, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonRepeat(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonRepeat1(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonRule(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonChoice, TalonEndAnchor, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonSeq, TalonStartAnchor, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonSeq(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonCapture, TalonList, TalonOptional, TalonParenthesizedRule, TalonRepeat, TalonRepeat1, TalonWord, TalonComment, TalonError]]) -> None:
      pass
  class TalonSettingsDeclaration(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: Optional[collections.Sequence[TalonComment]], right: TalonBlock) -> None:
      pass
  class TalonSleepAction(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], arguments: 'TalonImplicitString') -> None:
      pass
  class TalonSourceFile(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonDeclarations, TalonMatches, TalonComment, TalonError]]) -> None:
      pass
  class TalonStartAnchor(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonStatement(Node):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonString(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonInterpolation, TalonStringContent, TalonStringEscapeSequence, TalonComment, TalonError]]) -> None:
      pass
  class TalonStringContent(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonStringEscapeSequence(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
  class TalonTagImportDeclaration(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], right: 'TalonIdentifier') -> None:
      pass
  class TalonUnaryOperator(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], operator: 'TalonOperator', right: 'TalonExpression') -> None:
      pass
  class TalonVariable(Branch):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point, children: typing.List[Union[TalonComment, TalonError]], variable_name: 'TalonIdentifier') -> None:
      pass
  class TalonWord(Leaf):
    def __init__(text: str, type_name: str, start_position: Point, end_position: Point) -> None:
      pass
