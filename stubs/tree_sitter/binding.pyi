from typing import Any

class Node:
    child_count: Any
    children: Any
    end_byte: Any
    end_point: Any
    has_changes: Any
    has_error: Any
    is_missing: Any
    is_named: Any
    named_child_count: Any
    next_named_sibling: Any
    next_sibling: Any
    parent: Any
    prev_named_sibling: Any
    prev_sibling: Any
    start_byte: Any
    start_point: Any
    text: Any
    type: Any
    def child_by_field_id(self, *args, **kwargs) -> Any: ...
    def child_by_field_name(self, *args, **kwargs) -> Any: ...
    def sexp(self, *args, **kwargs) -> Any: ...
    def walk(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class Parser:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def parse(self, *args, **kwargs) -> Any: ...
    def set_language(self, *args, **kwargs) -> Any: ...

class Query:
    def captures(self, *args, **kwargs) -> Any: ...
    def matches(self, *args, **kwargs) -> Any: ...

class Tree:
    root_node: Any
    text: Any
    def edit(self, *args, **kwargs) -> Any: ...
    def walk(self, *args, **kwargs) -> Any: ...

class TreeCursor:
    node: Any
    def current_field_name(self, *args, **kwargs) -> Any: ...
    def goto_first_child(self, *args, **kwargs) -> Any: ...
    def goto_next_sibling(self, *args, **kwargs) -> Any: ...
    def goto_parent(self, *args, **kwargs) -> Any: ...

def _language_field_id_for_name(*args, **kwargs) -> Any: ...
def _language_query(*args, **kwargs) -> Any: ...
